// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1, 3
// 6: 1, 2, 3, 6
// 10: 1, 2, 5, 10
// 15: 1, 3, 5, 15
// 21: 1, 3, 7, 21
// 28: 1, 2, 4, 7, 14, 28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over n divisors?

//function for counting triangle numbers
function triangleNumber(num) {
  return (num * (num + 1)) / 2;
}

function divisibleTriangleNumber(n) {
  //for tracking triangle numbers
  let nth = 1;
  //for tracking divisors
  let divisors = 0;

  while (n >= divisors) {
    //loop starts with zero quantity of divisors
    divisors = 0;
    nth++;
    let nthTriangleNumber = triangleNumber(nth);

    for (let i = 1; i < Math.sqrt(nthTriangleNumber); i++) {
      //because it always two divisors
      if (nthTriangleNumber % i === 0) {
        divisors += 2;
      }
    }
    //check if it have square root
    if (nthTriangleNumber % Math.sqrt(nthTriangleNumber) === 0) {
      divisors += 1;
    }
  }

  return triangleNumber(nth);
}

divisibleTriangleNumber(500);
